name: Run Lilypad Job

on:
  issues:
    types: [opened, edited]

permissions:
  contents: write
  issues: write  

jobs:
  run_job:
    runs-on: ubuntu-latest
    if: github.event.issue.title == 'Run Lilypad Job'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set OSARCH and OSNAME
        run: |
          OSARCH=$(uname -m | awk '{if ($0 ~ /arm64|aarch64/) print "arm64"; else if ($0 ~ /x86_64|amd64/) print "amd64"; else print "unsupported_arch"}')
          echo "OSARCH=$OSARCH" >> $GITHUB_ENV
          OSNAME=$(uname -s | awk '{if ($1 == "Darwin") print "darwin"; else if ($1 == "Linux") print "linux"; else print "unsupported_os"}')
          echo "OSNAME=$OSNAME" >> $GITHUB_ENV

      - name: Download Lilypad
        run: |
          curl https://api.github.com/repos/lilypad-tech/lilypad/releases/latest | grep "browser_download_url.*lilypad-$OSNAME-$OSARCH-cpu" | cut -d : -f 2,3 | tr -d \" | wget -i - -O lilypad

      - name: Install Lilypad
        run: |
          chmod +x lilypad
          sudo mv lilypad /usr/local/bin/lilypad

      - name: Run Lilypad job
        env:
          WEB3_PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        id: lilypad_run
        run: |
          lilypad --network demonet run cowsay:v0.0.4 -i Message="hello, lilypad"

      - name: Get Result Directory
        id: get_result_dir
        run: |
          # Set the base directory
          BASE_DIR="/tmp/lilypad/data/downloaded-files"
          # Find the subfolder
          if [[ -d "$BASE_DIR" ]]; then
            RESULT_DIR=$(find "$BASE_DIR" -maxdepth 1 -type d -not -path "$BASE_DIR")
            # Extract the folder name
            FOLDER_NAME=$(basename "$RESULT_DIR")
            echo "FOLDER_NAME=$FOLDER_NAME" >> $GITHUB_ENV
            echo "result_dir=$FOLDER_NAME" >> $GITHUB_OUTPUT
          else
            echo "No downloaded files directory found."
            exit 1
          fi
        
      - name: Commit Results
        run: |
          # Set the results directory
          RESULTS_DIR="/tmp/lilypad/data/downloaded-files/${{ steps.get_result_dir.outputs.result_dir }}"
          # Create a directory for the results in the repository
          REPO_RESULTS_DIR="downloaded-files/${{ steps.get_result_dir.outputs.result_dir }}"
          mkdir -p "$REPO_RESULTS_DIR"
          # Copy the results to the repository directory
          cp -r "$RESULTS_DIR"/* "$REPO_RESULTS_DIR"/
          # Add the results to the repository
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git add "$REPO_RESULTS_DIR"
          git commit -m "Add Lilypad job results: ${{ steps.get_result_dir.outputs.result_dir }}"
          git push

      - name: Update README
        run: |
          TIMESTAMP=$(date -u +'%Y-%m-%dT%H:%M:%S.%N%Z')
          echo "$TIMESTAMP [${{ steps.get_result_dir.outputs.result_dir }}](downloaded-files/${{ steps.get_result_dir.outputs.result_dir }})  " >> README.md
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git add README.md
          git commit -m "Update README with link to results"
          git push

      - name: Close the Issue
        uses: actions/github-script@v6
        with:
          script: |
            console.log("Closing the issue...");
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              state: "closed"
            });
            console.log("Issue closed.");          